import { ModalStack } from './modal-stack.svelte';
import type { LazyModalComponent, ModalComponent } from './types';
export interface ModalProps<ReturnValue = any> extends Record<string, any> {
    id: string;
    index: number;
    close: CloseFn<ReturnValue>;
    isOpen: boolean;
}
type CloseFn<R> = (...args: R extends void ? [] : [result: R]) => boolean;
export declare class StackedModal<R = any> extends EventTarget {
    private static _idCounter;
    private _props;
    private result;
    id: string;
    component: ModalComponent | LazyModalComponent;
    modals: ModalStack;
    exitBeforeEnter: boolean;
    constructor(modals: ModalStack, { id, component, props }: {
        id?: string;
        component: ModalComponent<any, any, any> | LazyModalComponent<any, any, any>;
        props?: Record<string, any>;
    });
    isOpen: boolean;
    get index(): number;
    get props(): ModalProps & Record<string, any>;
    close: (...args: R extends void ? [] : [result: R]) => boolean;
    get promise(): Promise<R>;
    onBeforeClose?: () => boolean | void;
}
export {};

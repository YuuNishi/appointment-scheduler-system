import { ModalStack } from './modal-stack.svelte';
export class StackedModal extends EventTarget {
    static _idCounter = 0;
    _props;
    result = createDeferredPromise();
    id;
    component;
    modals;
    exitBeforeEnter = $state(false);
    constructor(modals, { id, component, props }) {
        super();
        this.id = id || (StackedModal._idCounter++).toString();
        this.component = component;
        this._props = props ?? {};
        this.modals = modals;
    }
    isOpen = $derived.by(() => {
        if (this.modals.stack.length === 0) {
            return false;
        }
        const isCurrent = this.modals.stack[this.modals.stack.length - 1].id === this.id;
        return isCurrent && !this.modals.transitioning;
    });
    get index() {
        return this.modals.stack.indexOf(this);
    }
    get props() {
        return {
            ...this._props,
            id: this.id,
            index: this.index,
            isOpen: this.isOpen,
            close: this.close
        };
    }
    close = (...args) => {
        if (this.onBeforeClose?.() === false) {
            return false;
        }
        const value = args[0];
        this.dispatchEvent(new CustomEvent('close', { detail: value }));
        this.result.resolve(value);
        return true;
    };
    get promise() {
        return this.result.promise;
    }
    onBeforeClose;
}
function createDeferredPromise() {
    let resolve;
    let reject;
    const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return { promise, resolve, reject };
}
